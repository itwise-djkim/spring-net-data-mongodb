<?xml version="1.0" ?>
<project name="Spring.Data.MongoDb" default="build">
   
  <property name="datetime.now" value="${datetime::now()}" />

  <property name="root.dir" value="${project::get-base-directory()}" />
  <property name="deploy.dir" value="${root.dir}\..\deploy" />
  <property name="build.dir" value="${root.dir}\build" />
  <property name="package.dir" value="${root.dir}\package" />
  <property name="bin.dir" value="${root.dir}\bin" />
  <property name="doc.dir" value="${root.dir}\doc" />
  <property name="tools.dir" value="${root.dir}\tools" />
  <property name="setup.dir" value="${root.dir}\setup" />
  
  <property name="product.name" value="Spring.NET Data MongoDb" />
  <property name="product.company" value="SpringSource" />
  <property name="product.copyright" value="Copyright ${datetime::get-year(datetime.now)} ${product.company}" />
  <property name="product.url" value="http://www.springframework.net/" />
  <property name="product.description" value="The Spring Data MongoDb project applies core Spring concepts to the development of MongoDb data adapter." />
  
  <property name="product.version" value="1.0.0" />
  <!-- alpha / beta# / rc# -->
  <property name="product.releasetype" value="alpha" />
  <property name="product.fullname" value="${product.name} ${product.version}" if="${(product.releasetype == '')}" />
  <property name="product.fullname" value="${product.name} ${product.version} (${product.releasetype})" if="${(product.releasetype != '')}" />

  <property name="project.buildnumber" value="2000" />
  <property name="project.version" value="${product.version}.${project.buildnumber}" />
  <property name="project.buildtype" value="dev" />
  <property name="project.sign" value="false" overwrite="false" />
  
  <!--
  <if test="${project.sign and not(file::exists(root.dir + '/Spring.Net.snk'))}">
    <fail message="project.sign='true' but keyfile ${root.dir+'/Spring.Net.snk'} is missing" />
  </if>
  -->
  
  <readregistry property="net40.install.dir" key="SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\InstallPath" hive="LocalMachine" failonerror="true" />
  <property name="msbuild.exe" value="${net40.install.dir}\msbuild.exe" />
  
  <property name="skip-tests" value="false" overwrite="false" />
  <property name="run-test-categories" value="Unit" overwrite="false" />

  <!-- MAIN TARGETS -->
 
  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${bin.dir}" />
  </target>

  <target name="ncoverexplorer" depends="clean">
    <property name="product.fullname.temp" value="${product.fullname}"/>
    <property name="project.buildconfiguration" value="Debug" />
    <call target="build-net-3.5" />
    <exec program="${tools.dir}/NCoverExplorer/NCoverExplorer.exe" workingdir="${project.buildoutputdir}">
      <arg path="${project.buildoutputdir}/Spring.Data.MongoDb.Tests.dll-TestCoverage.xml" />
    </exec>
  </target>  

  <target name="build" depends="clean">
    <echo message="NAnt current .NET Framework = ${nant.settings.currentframework}" />
    <property name="product.fullname.temp" value="${product.fullname}"/>
    <property name="project.buildconfiguration" value="Debug" />
    <call target="build-all" />
    <property name="project.buildconfiguration" value="Release" />
    <call target="build-all" />
  </target>

  <target name="daily">
    <property name="project.buildtype" value="daily" />
    <property name="product.fullname" value="${product.name} (Daily build from ${datetime::get-month(datetime.now)}/${datetime::get-day(datetime.now)}/${datetime::get-year(datetime.now)})" />
    <property name="project.zip-filename" value="Spring.Data.MongoDb-${datetime::get-year(datetime.now)}${string::pad-left(datetime::get-month(datetime.now), 2, '0')}${string::pad-left(datetime::get-day(datetime.now), 2, '0')}-${string::pad-left(datetime::get-hour(datetime.now), 2, '0')}${string::pad-left(datetime::get-minute(datetime.now), 2, '0')}.zip" />
    <property name="run-test-categories" value="Unit,Integration" overwrite="true" />
    <call target="package-deploy"/>
  </target>

  <target name="release">
    <property name="project.buildtype" value="release" />
    <property name="project.zip-filename" value="Spring.Data.MongoDb-${product.version}.zip" if="${(product.releasetype == '')}" />
    <property name="project.zip-filename" value="Spring.Data.MongoDb-${product.version}-${product.releasetype}.zip" if="${(product.releasetype != '')}" />
    
    <call target="package-deploy"/>
    <call target="nuget-deploy"/>
  </target>

  
  <!-- TARGETS -->

  <target name="update-common-assemblyinfo">
    <echo message="Generating common AssemblyInfo file..." />
    <!-- ensure src/CommonAssemblyInfo.cs is writable if it already exists -->
    <attrib file="${root.dir}\src\CommonAssemblyInfo.cs" readonly="false" if="${file::exists('${root.dir}\src\CommonAssemblyInfo.cs')}" />
    <!-- generate the source file holding the common assembly-level attributes -->
    <asminfo output="${root.dir}\src\CommonAssemblyInfo.cs" language="CSharp">
      <imports>
        <import namespace="System" />
        <import namespace="System.Reflection" />
        <import namespace="System.Runtime.InteropServices" />
      </imports>
      <attributes>
        <attribute type="CLSCompliantAttribute" value="true" />
        <attribute type="ComVisibleAttribute" value="false" />
        <attribute type="AssemblyProductAttribute" value="${product.fullname}" />
        <attribute type="AssemblyCompanyAttribute" value="${product.url}" />
        <attribute type="AssemblyCopyrightAttribute" value="${product.copyright}" />
        <attribute type="AssemblyTrademarkAttribute" value="Apache License, Version 2.0" />
        <attribute type="AssemblyCultureAttribute" value="" />
        <attribute type="AssemblyVersionAttribute" value="${project.version}" />
        <attribute type="AssemblyConfigurationAttribute" value="${project.framework}; ${project.version}; ${project.buildtype}" />
      </attributes>
    </asminfo>
  </target>

  <target name="build-all">
    <call target="build-net-4.0" />
  </target>

  <target name="build-net-4.0">
    <echo message="Building for .NET 4.0 with '${project.buildconfiguration}' configuration" />
    <property name="product.fullname" value="${product.fullname.temp} for .NET 4.0" />
    <property name="project.framework" value="net-4.0"/>
    <property name="project.version" value="${product.version}.${project.buildnumber}" />
    <property name="project.buildoutputdir" value="${bin.dir}\net\4.0\${project.buildconfiguration}" />
    <property name="project.buildsolutionfile" value="${root.dir}\Spring.Data.MongoDb.2010.sln" />
    <call target="update-common-assemblyinfo" />
    <call target="rebuild-solution"/>
    <call target="test-assemblies"/>
  </target>

  <target name="doc">
    <echo message="Generating reference documentation" />
    <nant buildfile="${doc.dir}/reference/docbook.build" target="all" />
    <echo message="Generating API documentation" />
    <!--<nant buildfile="${doc.dir}/api/sandcastle.build" target="all" />-->
  </target>

  <target name="package" depends="build,doc" description="Builds all modules and documentation">
    <!-- Copy release files -->
    <!-- Copy binaries -->
    <copy todir="${package.dir}\bin">
      <fileset basedir="${bin.dir}">
        <include name="**\Spring.Data.MongoDb.dll"/>
        <include name="**\Spring.Data.MongoDb.pdb"/>
        <include name="**\Spring.Data.MongoDb.xml"/>
        <include name="**\Spring.Data.MongoDb.Log4Net.dll"/>
        <include name="**\Spring.Data.MongoDb.Log4Net.pdb"/>
        <include name="**\Spring.Data.MongoDb.Log4Net.xml"/>
      </fileset>
    </copy>
    <!-- Copy sources -->
    <copy todir="${package.dir}">
      <fileset basedir="${root.dir}">
        <include name="*.sln"/>
        <include name="readme.txt"/>
        <include name="license.txt"/>
        <include name="examples\**"/>
        <include name="lib\**"/>
        <include name="src\**"/>
        <include name="test\**"/>
        <exclude name="*.snk"/>
        <exclude name="**\.git*"/>
        <exclude name="**\*.build"/>
        <exclude name="**\*.bat"/>
        <exclude name="**\*.suo"/>
        <exclude name="**\*.user"/>
        <exclude name="**\*.cache"/>
        <exclude name="**\*.xap"/>
        <exclude name="src\**\bin\**"/>
        <exclude name="src\**\obj\**"/>
        <exclude name="test\**\bin\**"/>
        <exclude name="test\**\obj\**"/>
        <exclude name="examples\**\bin\**"/>
        <exclude name="examples\**\obj\**"/>
		<exclude name="**\*.nuspec"/>
      </fileset>
    </copy>
    <!-- Copy docs -->
    <copy todir="${package.dir}\doc\reference">
      <fileset basedir="${doc.dir}\reference\target">
        <include name="**\*" />
      </fileset>
    </copy>
    <copy todir="${package.dir}\doc\api">
      <fileset basedir="${doc.dir}\api\target">
        <include name="**\*.chm" />
      </fileset>
    </copy>
  </target>

  <target name="nuget" depends="build">
	<echo message="Generating NuGet package..." />
	<echo message="Setup Dir: ${setup.dir}" />
	<echo message="Build Dir: ${build.dir}" />
	<mkdir dir="${build.dir}" if="${not directory::exists('build.dir')}"/>
	<mkdir dir="${package.dir}" if="${not directory::exists('package.dir')}"/>
	<exec program="${tools.dir}\NuGet\NuGet.exe" workingdir="${build.dir}" verbose="true">
		<arg value="pack" />
		<arg value="${setup.dir}\Spring.Data.MongoDb.nuspec" />
		<arg value="-version" if="${property::exists('project.version')}" />
		<arg value="${project.version}" if="${property::exists('project.version')}" />
    </exec>
	
	<if test="${property::exists('project.version')}">
      <xmlpoke file="${setup.dir}\Spring.Data.MongoDb.nuspec" xpath="/n:package/n:metadata/n:dependencies/n:dependency[@id='Spring.Data.MongoDb']/@version" value="${project.version}">
        <namespaces>
          <namespace prefix="n" uri="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd" />
        </namespaces>
      </xmlpoke>
    </if>
	
	<exec program="${tools.dir}\NuGet\NuGet.exe" workingdir="${build.dir}" verbose="true">
		<arg value="pack" />
		<arg value="${setup.dir}\Spring.Data.MongoDb.Log4Net.nuspec" />
		<arg value="-version" if="${property::exists('project.version')}" />
		<arg value="${project.version}" if="${property::exists('product.version')}" />
    </exec>
  </target>

  <target name="package-deploy" depends="package" description="Deploy Package distribution as .zip file">
    <echo message="Zipping package..." />
    <zip zipfile="${deploy.dir}\${project.zip-filename}">
      <fileset basedir="${package.dir}">
        <include name="**\*" />
        <exclude name="*.zip" />
      </fileset>
    </zip>
  </target>

  <target name="nuget-deploy" depends="nuget">
    <copy todir="${deploy.dir}">
      <fileset basedir="${build.dir}">
        <include name="*.nupkg" />
      </fileset>
    </copy>
  </target>

  <target name="rebuild-solution" description="Rebuilds a given solution file">
    <echo message="Rebuilding solution '${project.buildsolutionfile}'" />
	<if test="${project.sign}">
		<copy todir="${root.dir}">
			<fileset basedir="${root.dir}\..\..\">
				<include name="Spring.Net.snk" />
			</fileset>
		</copy>
	</if>
    <exec program="${msbuild.exe}">
      <arg value="${project.buildsolutionfile}"/>
      <arg value="/nologo" />
      <arg value="/target:Rebuild" />
      <arg value="/verbosity:minimal" />
      <arg value="/property:OutDir=${project.buildoutputdir}/"/>
      <arg value="/property:Configuration=${project.buildconfiguration}" />
    </exec>
  </target>

  <target name="test-assemblies" description="Unit tests given assemblies">

  <if test="${not skip-tests}">
   
  <echo message="Unit testing in '${project.buildoutputdir}'" />
    <foreach item="File" property="filename">
      <in>
        <items basedir="${project.buildoutputdir}">
          <include name="**\*.Tests.dll" />
        </items>
      </in>
      <do>
        <property name="test.assemblyname" value="${path::get-file-name(filename)}" />
        <exec program="${tools.dir}\nunit\net-3.5\bin\nunit-console-x86.exe" workingdir="${project.buildoutputdir}" verbose="true">
          <arg line="${test.assemblyname}" />
		  <arg value="/include:${run-test-categories}" />
          <arg value="/xml:${test.assemblyname}-TestResults.xml" />
          <arg value="/nologo" />
          <arg value="/noshadow" />
          <arg value="/framework:${project.framework}" />
        </exec>
      </do>
    </foreach>
	
	</if>
	
  </target>

  <target name="testcover-assemblies" description="Code coverage given assemblies">
    <echo message="Coverage Testing in '${project.buildoutputdir}'" />
    <foreach item="File" property="filename">
      <in>
        <items basedir="${project.buildoutputdir}">
          <include name="**\*.Tests.dll" />
        </items>
      </in>
      <do>
        <property name="test.assemblyname" value="${path::get-file-name(filename)}" />
        <property name="src.assemblyname" value="${string::substring(test.assemblyname,0,string::last-index-of(test.assemblyname, '.Tests') )}" />
        <exec program="${tools.dir}/NCover/ncover.console.exe" workingdir="${project.buildoutputdir}" verbose="true">
          <arg value="//q" />
          <arg value="//reg" />
          <arg value="//w" />
          <arg path="${project.buildoutputdir}" />
          <arg value="//x" />
          <arg path="${project.buildoutputdir}/${test.assemblyname}-TestCoverage.xml" />
          <arg value="//a" />
          <arg value="${src.assemblyname}" />
          <arg value="//ea" />
          <arg value="CoverageExcludeAttribute" />
          <arg value="//q" />
          <arg path="${tools.dir}\NUnit\bin\net-2.0\nunit-console-x86.exe" />
          <arg line="${test.assemblyname}" />
          <arg value="/xml:${test.assemblyname}-TestResults.xml" />
          <arg value="/nologo" />
          <arg value="/noshadow" />
          <arg value="/framework:${project.framework}" />
        </exec>
      </do>
    </foreach>
  </target>
  
</project>